/*
 * Order Service G09
 * API designed by team G09 for the HS24 SWDA course at HSLU
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.hslu.swda.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * CustomerOrderCreate
 */
@JsonPropertyOrder({
  CustomerOrderCreate.JSON_PROPERTY_DATE_TIME,
  CustomerOrderCreate.JSON_PROPERTY_STATUS,
  CustomerOrderCreate.JSON_PROPERTY_ORDER_ITEMS,
  CustomerOrderCreate.JSON_PROPERTY_ORDER_TYPE,
  CustomerOrderCreate.JSON_PROPERTY_CUSTOMER_ID,
  CustomerOrderCreate.JSON_PROPERTY_SELLER_ID
})
@JsonTypeName("CustomerOrderCreate")
@Introspected
public class CustomerOrderCreate {
    public static final String JSON_PROPERTY_DATE_TIME = "dateTime";
    private OffsetDateTime dateTime;

    /**
     * Gets or Sets status
     */
    public enum StatusEnum {
        PENDING("PENDING"),
        CONFIRMED("CONFIRMED"),
        AWAITING_PAYMENT("AWAITING_PAYMENT"),
        DONE("DONE");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_STATUS = "status";
    private StatusEnum status;

    public static final String JSON_PROPERTY_ORDER_ITEMS = "orderItems";
    private List<@Valid OrderItemCreate> orderItems = new ArrayList<>();

    /**
     * Gets or Sets orderType
     */
    public enum OrderTypeEnum {
        CUSTOMER_ORDER("CUSTOMER_ORDER");

        private String value;

        OrderTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static OrderTypeEnum fromValue(String value) {
            for (OrderTypeEnum b : OrderTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_ORDER_TYPE = "orderType";
    private OrderTypeEnum orderType;

    public static final String JSON_PROPERTY_CUSTOMER_ID = "customerId";
    private UUID customerId;

    public static final String JSON_PROPERTY_SELLER_ID = "sellerId";
    private UUID sellerId;

    public CustomerOrderCreate(OffsetDateTime dateTime, StatusEnum status, List<@Valid OrderItemCreate> orderItems, OrderTypeEnum orderType, UUID customerId, UUID sellerId) {
        this.dateTime = dateTime;
        this.status = status;
        this.orderItems = orderItems;
        this.orderType = orderType;
        this.customerId = customerId;
        this.sellerId = sellerId;
    }

    public CustomerOrderCreate dateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
        return this;
    }

    /**
     * Get dateTime
     * @return dateTime
     */
    @NotNull
    @Schema(name = "dateTime", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DATE_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getDateTime() {
        return dateTime;
    }

    @JsonProperty(JSON_PROPERTY_DATE_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setDateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
    }

    public CustomerOrderCreate status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     * @return status
     */
    @NotNull
    @Schema(name = "status", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public CustomerOrderCreate orderItems(List<@Valid OrderItemCreate> orderItems) {
        this.orderItems = orderItems;
        return this;
    }

    public CustomerOrderCreate addOrderItemsItem(OrderItemCreate orderItemsItem) {
        this.orderItems.add(orderItemsItem);
        return this;
    }

    /**
     * Get orderItems
     * @return orderItems
     */
    @NotNull
    @Schema(name = "orderItems", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ORDER_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid OrderItemCreate> getOrderItems() {
        return orderItems;
    }

    @JsonProperty(JSON_PROPERTY_ORDER_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrderItems(List<@Valid OrderItemCreate> orderItems) {
        this.orderItems = orderItems;
    }

    public CustomerOrderCreate orderType(OrderTypeEnum orderType) {
        this.orderType = orderType;
        return this;
    }

    /**
     * Get orderType
     * @return orderType
     */
    @NotNull
    @Schema(name = "orderType", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ORDER_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OrderTypeEnum getOrderType() {
        return orderType;
    }

    @JsonProperty(JSON_PROPERTY_ORDER_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrderType(OrderTypeEnum orderType) {
        this.orderType = orderType;
    }

    public CustomerOrderCreate customerId(UUID customerId) {
        this.customerId = customerId;
        return this;
    }

    /**
     * Get customerId
     * @return customerId
     */
    @NotNull
    @Schema(name = "customerId", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getCustomerId() {
        return customerId;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCustomerId(UUID customerId) {
        this.customerId = customerId;
    }

    public CustomerOrderCreate sellerId(UUID sellerId) {
        this.sellerId = sellerId;
        return this;
    }

    /**
     * Get sellerId
     * @return sellerId
     */
    @NotNull
    @Schema(name = "sellerId", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_SELLER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getSellerId() {
        return sellerId;
    }

    @JsonProperty(JSON_PROPERTY_SELLER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSellerId(UUID sellerId) {
        this.sellerId = sellerId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomerOrderCreate customerOrderCreate = (CustomerOrderCreate) o;
        return Objects.equals(this.dateTime, customerOrderCreate.dateTime) &&
            Objects.equals(this.status, customerOrderCreate.status) &&
            Objects.equals(this.orderItems, customerOrderCreate.orderItems) &&
            Objects.equals(this.orderType, customerOrderCreate.orderType) &&
            Objects.equals(this.customerId, customerOrderCreate.customerId) &&
            Objects.equals(this.sellerId, customerOrderCreate.sellerId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dateTime, status, orderItems, orderType, customerId, sellerId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CustomerOrderCreate {\n");
        sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    orderItems: ").append(toIndentedString(orderItems)).append("\n");
        sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
        sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
        sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

