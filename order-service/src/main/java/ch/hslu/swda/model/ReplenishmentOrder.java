/*
 * Order Service G09
 * API designed by team G09 for the HS24 SWDA course at HSLU
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.hslu.swda.model;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.core.annotation.Introspected;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * ReplenishmentOrder
 */
@JsonPropertyOrder({
  ReplenishmentOrder.JSON_PROPERTY_ID,
  ReplenishmentOrder.JSON_PROPERTY_DATE_TIME,
  ReplenishmentOrder.JSON_PROPERTY_STATUS,
  ReplenishmentOrder.JSON_PROPERTY_ORDER_ITEMS,
  ReplenishmentOrder.JSON_PROPERTY_PRICE,
  ReplenishmentOrder.JSON_PROPERTY_ORDER_TYPE,
  ReplenishmentOrder.JSON_PROPERTY_DESTINATION
})
@JsonTypeName("ReplenishmentOrder")
@Introspected
public class ReplenishmentOrder {
    public static final String JSON_PROPERTY_ID = "id";
    private UUID id;

    public static final String JSON_PROPERTY_DATE_TIME = "dateTime";
    private OffsetDateTime dateTime;

    /**
     * Gets or Sets status
     */
    public enum StatusEnum {
        PENDING("PENDING"),
        CONFIRMED("CONFIRMED"),
        AWAITING_PAYMENT("AWAITING_PAYMENT"),
        DONE("DONE");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_STATUS = "status";
    private StatusEnum status;

    public static final String JSON_PROPERTY_ORDER_ITEMS = "orderItems";
    private List<@Valid OrderItem> orderItems = new ArrayList<>();

    public static final String JSON_PROPERTY_PRICE = "price";
    private BigDecimal price;

    /**
     * Gets or Sets orderType
     */
    public enum OrderTypeEnum {
        REPLENISHMENT_ORDER("replenishmentOrder");

        private String value;

        OrderTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static OrderTypeEnum fromValue(String value) {
            for (OrderTypeEnum b : OrderTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_ORDER_TYPE = "orderType";
    private OrderTypeEnum orderType;

    public static final String JSON_PROPERTY_DESTINATION = "destination";
    private Warehouse destination;

    public ReplenishmentOrder(UUID id, OffsetDateTime dateTime, StatusEnum status, List<@Valid OrderItem> orderItems, BigDecimal price, OrderTypeEnum orderType, Warehouse destination) {
        this.id = id;
        this.dateTime = dateTime;
        this.status = status;
        this.orderItems = orderItems;
        this.price = price;
        this.orderType = orderType;
        this.destination = destination;
    }

    public ReplenishmentOrder id(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     * @return id
     */
    @NotNull
    @Schema(name = "id", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(UUID id) {
        this.id = id;
    }

    public ReplenishmentOrder dateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
        return this;
    }

    /**
     * Get dateTime
     * @return dateTime
     */
    @NotNull
    @Schema(name = "dateTime", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DATE_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getDateTime() {
        return dateTime;
    }

    @JsonProperty(JSON_PROPERTY_DATE_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setDateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
    }

    public ReplenishmentOrder status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     * @return status
     */
    @NotNull
    @Schema(name = "status", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public ReplenishmentOrder orderItems(List<@Valid OrderItem> orderItems) {
        this.orderItems = orderItems;
        return this;
    }

    public ReplenishmentOrder addOrderItemsItem(OrderItem orderItemsItem) {
        this.orderItems.add(orderItemsItem);
        return this;
    }

    /**
     * Get orderItems
     * @return orderItems
     */
    @NotNull
    @Schema(name = "orderItems", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ORDER_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid OrderItem> getOrderItems() {
        return orderItems;
    }

    @JsonProperty(JSON_PROPERTY_ORDER_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrderItems(List<@Valid OrderItem> orderItems) {
        this.orderItems = orderItems;
    }

    public ReplenishmentOrder price(BigDecimal price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     * @return price
     */
    @NotNull
    @Schema(name = "price", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getPrice() {
        return price;
    }

    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    public ReplenishmentOrder orderType(OrderTypeEnum orderType) {
        this.orderType = orderType;
        return this;
    }

    /**
     * Get orderType
     * @return orderType
     */
    @NotNull
    @Schema(name = "orderType", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ORDER_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OrderTypeEnum getOrderType() {
        return orderType;
    }

    @JsonProperty(JSON_PROPERTY_ORDER_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrderType(OrderTypeEnum orderType) {
        this.orderType = orderType;
    }

    public ReplenishmentOrder destination(Warehouse destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get destination
     * @return destination
     */
    @Valid
    @NotNull
    @Schema(name = "destination", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DESTINATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Warehouse getDestination() {
        return destination;
    }

    @JsonProperty(JSON_PROPERTY_DESTINATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDestination(Warehouse destination) {
        this.destination = destination;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReplenishmentOrder replenishmentOrder = (ReplenishmentOrder) o;
        return Objects.equals(this.id, replenishmentOrder.id) &&
            Objects.equals(this.dateTime, replenishmentOrder.dateTime) &&
            Objects.equals(this.status, replenishmentOrder.status) &&
            Objects.equals(this.orderItems, replenishmentOrder.orderItems) &&
            Objects.equals(this.price, replenishmentOrder.price) &&
            Objects.equals(this.orderType, replenishmentOrder.orderType) &&
            Objects.equals(this.destination, replenishmentOrder.destination);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, dateTime, status, orderItems, price, orderType, destination);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ReplenishmentOrder {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    orderItems: ").append(toIndentedString(orderItems)).append("\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
        sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

