/*
 * Order Service G09
 * API designed by team G09 for the HS24 SWDA course at HSLU
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.hslu.swda.micro;

import ch.hslu.swda.model.Log;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.annotation.*;
import io.micronaut.http.exceptions.HttpStatusException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.NotNull;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.UUID;

@Controller("/api/v1")
@Tag(name = "Logs", description = "The Logs API")
public class LogsController {
    /**
     * Get list of logs
     *
     * @param source query by log source (optional)
     * @param customerId query by customerId (optional)
     * @param orderId query by orderId (optional)
     * @return List&lt;Log&gt;
     */
    @Operation(
        operationId = "logsGet",
        summary = "Get list of logs",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of logs", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Log.class))
            })
        },
        parameters = {
            @Parameter(name = "source", description = "query by log source"),
            @Parameter(name = "customerId", description = "query by customerId"),
            @Parameter(name = "orderId", description = "query by orderId")
        }
    )
    @Get(uri="/logs")
    @Produces(value = {"application/json"})
    public Mono<List<Log>> logsGet(
        @QueryValue(value="source") @Nullable String source, 
        @QueryValue(value="customerId") @Nullable String customerId, 
        @QueryValue(value="orderId") @Nullable String orderId
    ) {
        // TODO implement logsGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get a log by ID
     *
     * @param logId  (required)
     * @return Log
     */
    @Operation(
        operationId = "logsLogIdGet",
        summary = "Get a log by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Log details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Log.class))
            }),
            @ApiResponse(responseCode = "404", description = "Log not found")
        },
        parameters = {
            @Parameter(name = "logId", required = true)
        }
    )
    @Get(uri="/logs/{logId}")
    @Produces(value = {"application/json"})
    public Mono<Log> logsLogIdGet(
        @PathVariable(value="logId") @NotNull UUID logId
    ) {
        // TODO implement logsLogIdGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
