/*
 * Order Service G09
 * API designed by team G09 for the HS24 SWDA course at HSLU
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ch.hslu.swda.model;

import java.util.Objects;
import java.util.UUID;

//import ch.hslu.swda.common.entities.Order;
import com.fasterxml.jackson.annotation.*;
import java.time.OffsetDateTime;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.micronaut.core.annotation.*;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Shipment
 */
@JsonPropertyOrder({
    Shipment.JSON_PROPERTY_ID,
    Shipment.JSON_PROPERTY_ORDER_ID,
    Shipment.JSON_PROPERTY_CUSTOMER_ORDER,
    Shipment.JSON_PROPERTY_DEPARTURE,
    Shipment.JSON_PROPERTY_ESTIMATED_ARRIVAL
})
@JsonTypeName("Shipment")
@Introspected
public class Shipment {
    public static final String JSON_PROPERTY_ID = "id";
    private UUID id;

    public static final String JSON_PROPERTY_ORDER_ID = "orderId";
    private UUID orderId;

    public static final String JSON_PROPERTY_CUSTOMER_ORDER = "order";
    private transient Order order;

    public static final String JSON_PROPERTY_DEPARTURE = "departure";
    private OffsetDateTime departure;

    public static final String JSON_PROPERTY_ESTIMATED_ARRIVAL = "estimatedArrival";
    private OffsetDateTime estimatedArrival;

    public Shipment(UUID id, UUID orderId, OffsetDateTime departure, OffsetDateTime estimatedArrival) {
        this.id = id;
        this.orderId = orderId;
        this.departure = departure;
        this.estimatedArrival = estimatedArrival;
    }

    public Shipment(UUID id, Order order) {
        this.id = id;
        this.order = order;
    }

    public Shipment() {}

    public Shipment id(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     * @return id
     */
    @NotNull
    @Schema(name = "id", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(UUID id) {
        this.id = id;
    }

    public Shipment order(Order order) {
        this.order = order;
        return this;
    }

    /**
     * Get order
     * @return orderId
     */
    @NotNull
    @Schema(name = "orderId", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ORDER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getOrderId() {
        return orderId;
    }

    @JsonProperty(JSON_PROPERTY_ORDER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrderId(UUID orderId) {
        this.orderId = orderId;
    }

    public Shipment orderId(UUID orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get order
     * @return order
     */
    @Valid
    @NotNull
    @Schema(name = "order", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Order getCustomerOrder() {
        return order;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCustomerOrder(Order order) {
        this.order = order;
    }

    public Shipment departure(OffsetDateTime departure) {
        this.departure = departure;
        return this;
    }

    /**
     * The date and time when the shipment departs
     * @return departure
     */
    @Nullable
    @Schema(name = "departure", description = "The date and time when the shipment departs", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_DEPARTURE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getDeparture() {
        return departure;
    }

    @JsonProperty(JSON_PROPERTY_DEPARTURE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setDeparture(OffsetDateTime departure) {
        this.departure = departure;
    }

    public Shipment estimatedArrival(OffsetDateTime estimatedArrival) {
        this.estimatedArrival = estimatedArrival;
        return this;
    }

    /**
     * The estimated date and time of arrival for the shipment
     * @return estimatedArrival
     */
    @Nullable
    @Schema(name = "estimatedArrival", description = "The estimated date and time of arrival for the shipment", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_ESTIMATED_ARRIVAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getEstimatedArrival() {
        return estimatedArrival;
    }

    @JsonProperty(JSON_PROPERTY_ESTIMATED_ARRIVAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setEstimatedArrival(OffsetDateTime estimatedArrival) {
        this.estimatedArrival = estimatedArrival;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Shipment shipment = (Shipment) o;
        return Objects.equals(this.id, shipment.id) &&
                Objects.equals(this.order, shipment.order) &&
                Objects.equals(this.departure, shipment.departure) &&
                Objects.equals(this.estimatedArrival, shipment.estimatedArrival);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, order, departure, estimatedArrival);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Shipment {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    order: ").append(toIndentedString(order)).append("\n");
        sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
        sb.append("    estimatedArrival: ").append(toIndentedString(estimatedArrival)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
