/*
 * Order Service G09
 * API designed by team G09 for the HS24 SWDA course at HSLU
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.hslu.swda.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import ch.hslu.swda.model.CustomerOrderCreate;
import ch.hslu.swda.model.OrderItemCreate;
import ch.hslu.swda.model.ReplenishmentOrderCreate;
import com.fasterxml.jackson.annotation.*;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.micronaut.core.annotation.*;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * OrderCreate
 */
@JsonPropertyOrder({
  OrderCreate.JSON_PROPERTY_DATE_TIME,
  OrderCreate.JSON_PROPERTY_STATUS,
  OrderCreate.JSON_PROPERTY_ORDER_ITEMS,
  OrderCreate.JSON_PROPERTY_ORDER_TYPE,
  OrderCreate.JSON_PROPERTY_CUSTOMER_ID,
  OrderCreate.JSON_PROPERTY_SELLER_ID,
  OrderCreate.JSON_PROPERTY_DESTINATION_ID
})
@JsonTypeName("OrderCreate")
@JsonIgnoreProperties(
  value = "orderType", // ignore manually set orderType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the orderType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "orderType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CustomerOrderCreate.class, name = "customerOrder"),
  @JsonSubTypes.Type(value = ReplenishmentOrderCreate.class, name = "replenishmentOrder"),
})

@Introspected
public class OrderCreate {
    public static final String JSON_PROPERTY_DATE_TIME = "dateTime";
    private OffsetDateTime dateTime;

    /**
     * Gets or Sets status
     */
    public enum StatusEnum {
        PENDING("PENDING"),
        CONFIRMED("CONFIRMED"),
        AWAITING_PAYMENT("AWAITING_PAYMENT"),
        DONE("DONE");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_STATUS = "status";
    private StatusEnum status;

    public static final String JSON_PROPERTY_ORDER_ITEMS = "orderItems";
    private List<@Valid OrderItemCreate> orderItems = new ArrayList<>();

    /**
     * Gets or Sets orderType
     */
    public enum OrderTypeEnum {
        REPLENISHMENT_ORDER("replenishmentOrder");

        private String value;

        OrderTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static OrderTypeEnum fromValue(String value) {
            for (OrderTypeEnum b : OrderTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_ORDER_TYPE = "orderType";
    protected OrderTypeEnum orderType;

    public static final String JSON_PROPERTY_CUSTOMER_ID = "customerId";
    private UUID customerId;

    public static final String JSON_PROPERTY_SELLER_ID = "sellerId";
    private UUID sellerId;

    public static final String JSON_PROPERTY_DESTINATION_ID = "destinationId";
    private UUID destinationId;

    public OrderCreate(OffsetDateTime dateTime, StatusEnum status, List<@Valid OrderItemCreate> orderItems, OrderTypeEnum orderType, UUID customerId, UUID sellerId, UUID destinationId) {
        this.dateTime = dateTime;
        this.status = status;
        this.orderItems = orderItems;
        this.orderType = orderType;
        this.customerId = customerId;
        this.sellerId = sellerId;
        this.destinationId = destinationId;
    }

    public OrderCreate dateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
        return this;
    }

    /**
     * Get dateTime
     * @return dateTime
     */
    @NotNull
    @Schema(name = "dateTime", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DATE_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getDateTime() {
        return dateTime;
    }

    @JsonProperty(JSON_PROPERTY_DATE_TIME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setDateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
    }

    public OrderCreate status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     * @return status
     */
    @NotNull
    @Schema(name = "status", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StatusEnum getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public OrderCreate orderItems(List<@Valid OrderItemCreate> orderItems) {
        this.orderItems = orderItems;
        return this;
    }

    public OrderCreate addOrderItemsItem(OrderItemCreate orderItemsItem) {
        this.orderItems.add(orderItemsItem);
        return this;
    }

    /**
     * Get orderItems
     * @return orderItems
     */
    @NotNull
    @Schema(name = "orderItems", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ORDER_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid OrderItemCreate> getOrderItems() {
        return orderItems;
    }

    @JsonProperty(JSON_PROPERTY_ORDER_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrderItems(List<@Valid OrderItemCreate> orderItems) {
        this.orderItems = orderItems;
    }

    public OrderCreate orderType(OrderTypeEnum orderType) {
        this.orderType = orderType;
        return this;
    }

    /**
     * Get orderType
     * @return orderType
     */
    @NotNull
    @Schema(name = "orderType", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ORDER_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OrderTypeEnum getOrderType() {
        return orderType;
    }

    @JsonProperty(JSON_PROPERTY_ORDER_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrderType(OrderTypeEnum orderType) {
        this.orderType = orderType;
    }

    public OrderCreate customerId(UUID customerId) {
        this.customerId = customerId;
        return this;
    }

    /**
     * Get customerId
     * @return customerId
     */
    @NotNull
    @Schema(name = "customerId", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getCustomerId() {
        return customerId;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCustomerId(UUID customerId) {
        this.customerId = customerId;
    }

    public OrderCreate sellerId(UUID sellerId) {
        this.sellerId = sellerId;
        return this;
    }

    /**
     * Get sellerId
     * @return sellerId
     */
    @NotNull
    @Schema(name = "sellerId", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_SELLER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getSellerId() {
        return sellerId;
    }

    @JsonProperty(JSON_PROPERTY_SELLER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSellerId(UUID sellerId) {
        this.sellerId = sellerId;
    }

    public OrderCreate destinationId(UUID destinationId) {
        this.destinationId = destinationId;
        return this;
    }

    /**
     * Get destinationId
     * @return destinationId
     */
    @NotNull
    @Schema(name = "destinationId", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DESTINATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getDestinationId() {
        return destinationId;
    }

    @JsonProperty(JSON_PROPERTY_DESTINATION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDestinationId(UUID destinationId) {
        this.destinationId = destinationId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderCreate orderCreate = (OrderCreate) o;
        return Objects.equals(this.dateTime, orderCreate.dateTime) &&
            Objects.equals(this.status, orderCreate.status) &&
            Objects.equals(this.orderItems, orderCreate.orderItems) &&
            Objects.equals(this.orderType, orderCreate.orderType) &&
            Objects.equals(this.customerId, orderCreate.customerId) &&
            Objects.equals(this.sellerId, orderCreate.sellerId) &&
            Objects.equals(this.destinationId, orderCreate.destinationId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dateTime, status, orderItems, orderType, customerId, sellerId, destinationId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderCreate {\n");
        sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    orderItems: ").append(toIndentedString(orderItems)).append("\n");
        sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
        sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
        sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
        sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

